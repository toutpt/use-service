{"version":3,"sources":["useService.js","App.js","index.js"],"names":["factories","Map","services","notifies","initService","id","instance","get","factory","fn","forEach","callMe","Object","assign","dependencies","map","set","useService","options","subscribe","useState","setState","useEffect","has","delete","undefined","Set","add","registerService","idOrFn","value","$id","Error","$log","this","info","console","$count","notify","count","increment","decrement","Counter","props","log","CountController","onClick","App","show","setShow","className","React","version","ReactDOM","render","document","getElementById"],"mappings":"8MAEMA,EAAY,IAAIC,IAChBC,EAAW,IAAID,IACfE,EAAW,IAAIF,IAErB,SAASG,EAAYC,GACnB,IAAIC,EAAWJ,EAASK,IAAIF,GAC5B,IAAKC,EAAU,CACb,IAIME,EAAUR,EAAUO,IAAIF,GAC9BC,EAAQ,YAAOE,EAAQC,GAAf,CALO,YACZN,EAASI,IAAIF,IAAO,IAAIK,SAAQ,SAAAC,GAAM,OAAIA,EAAOC,OAAOC,OAAO,GAAIX,EAASK,IAAIF,UAI3E,mBAA6BG,EAAQM,aAAaC,IAAIX,MAC9DF,EAASc,IAAIX,EAAIC,GAEnB,OAAOA,EASF,SAASW,EAAWZ,GAAoC,IAAhCa,EAA+B,uDAArB,CAAEC,WAAW,GAAQ,EACvCC,mBAASlB,EAASK,IAAIF,IADiB,mBACnDgB,EADmD,KAgB5D,OAdAC,qBAAU,WACR,OAAO,WACDnB,EAASI,IAAIF,GAAIkB,IAAIF,IACvBlB,EAASI,IAAIF,GAAImB,OAAOH,MAG3B,IACCH,EAAQC,iBACeM,IAArBtB,EAASI,IAAIF,GACfF,EAASa,IAAIX,EAAI,IAAIqB,IAAI,CAACL,KAChBlB,EAASI,IAAIF,GAAIkB,IAAIF,IAC/BlB,EAASI,IAAIF,GAAIsB,IAAIN,IAGlBjB,EAAYC,GAQd,SAASuB,EAAgBC,EAAQC,GACtC,IAAIzB,EAAKwB,EACLpB,EAAKqB,EAKT,GAJKA,IACHzB,EAAKwB,EAAOE,IACZtB,EAAKoB,GAEH7B,EAAUO,IAAIF,GAChB,MAAM,IAAI2B,MAAJ,uDAA0D3B,IAEhEL,EAAUgB,IAAIX,EAAI,CAChBI,KACAK,aAAcL,EAAGK,cAAgB,K,WC1DvC,SAASmB,IACPC,KAAKC,KAAO,wBAAa,EAAAC,SAAQD,KAAR,oBAK3B,SAASE,EAAOC,EAAQL,GAAO,IAAD,OAW5B,OAVAC,KAAKK,MAAQ,EACbN,EAAKE,KAAK,oDACVD,KAAKM,UAAY,WACf,EAAKD,OAAS,EACdD,KAEFJ,KAAKO,UAAY,WACf,EAAKF,OAAS,EACdD,KAEKJ,KAWT,SAASQ,EAAQC,GACf,IAAMN,EAASpB,EAAW,UAG1B,OAFAmB,QAAQQ,IAAI,mBAAoBD,EAAMtC,IAGlC,oBAAGA,GAAIsC,EAAMtC,GAAb,+BAAoCsC,EAAMtC,GAA1C,MAAiDgC,EAAOE,SAK9D,SAASM,EAAgBF,GACvB,IAAMN,EAASpB,EAAW,UAG1B,OAFAmB,QAAQQ,IAAI,4BAGV,gCACE,wBAAQE,QAAS,kBAAMT,EAAOG,aAA9B,eAGA,wBAAQM,QAAS,kBAAMT,EAAOI,aAA9B,kBA5CNR,EAAKF,IAAM,OAgBXM,EAAON,IAAM,QACbM,EAAOvB,aAAe,CAAC,QAIvBc,EAAgB,OAAQK,GACxBL,EAAgB,SAAUS,GAgDXU,MAlBf,WACEX,QAAQQ,IAAI,cADC,MAEWxB,oBAAS,GAFpB,mBAEN4B,EAFM,KAEAC,EAFA,KAGb,OACE,sBAAKC,UAAU,MAAf,8BACoBC,IAAMC,QAD1B,IAEE,cAACV,EAAD,CAASrC,GAAG,UACZ,cAACwC,EAAD,IACCG,GACC,cAACN,EAAD,CAASrC,GAAG,WAEd,wBAAQyC,QAAS,kBAAMG,GAASD,IAAhC,gDCjENK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f055bb45.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst factories = new Map();  // hold a function service\nconst services = new Map();  // hold an instance of a function service\nconst notifies = new Map();  // hold setState of component which use a service\n\nfunction initService(id) {\n  let instance = services.get(id);\n  if (!instance) {\n    const notify = () => {\n      (notifies.get(id) || []).forEach(callMe => callMe(Object.assign({}, services.get(id))));\n    };\n    // this will call every setState to update each components\n    const factory = factories.get(id);\n    instance = new factory.fn(notify, ...factory.dependencies.map(initService));\n    services.set(id, instance);\n  }\n  return instance;\n}\n\n/**\n * useService let you get instance of a registred service\n * @param {string} id - the id of the service you want to get\n * @param {Object} options - to configure the behavior you want\n * @param {boolean} options.subscribe - set to false to not be notified of updates\n */\nexport function useService(id, options = { subscribe: true }) {\n  const [, setState] = useState(services.get(id));\n  useEffect(() => {\n    return function cleanup() {\n      if (notifies.get(id).has(setState)) {\n        notifies.get(id).delete(setState);\n      }\n    };\n  }, []);\n  if (options.subscribe) {\n    if (notifies.get(id) === undefined) {\n      notifies.set(id, new Set([setState]));\n    } else if (!notifies.get(id).has(setState))  {\n      notifies.get(id).add(setState);\n    }\n  }\n  return initService(id);\n}\n\n/**\n * registerService let you register a function and map it to an id.\n * @param {string|function} idOrFn - the id of the service you want to get or the function constructor identifed\n * @param {function} value - the function constructor of the service\n */\nexport function registerService(idOrFn, value) {\n  let id = idOrFn;\n  let fn = value;\n  if (!value) {\n    id = idOrFn.$id;\n    fn = idOrFn;\n  }\n  if (factories.get(id)) {\n    throw new Error(`A service is already registred under the key ${id}`);\n  } else {\n    factories.set(id, {\n      fn,\n      dependencies: fn.dependencies || [],\n    });\n  }\n}\n\n\n/**\n * low level use of service (in case you are not in a component)\n * @param {string} id - the id of the service you want\n */\nexport function getService(id) {\n  return services.get(id);\n}\n","import React, { useState } from 'react';\nimport { registerService, useService } from './useService';\n\n// services/log.js\nfunction $log() {\n  this.info = (...args) => console.info(...args);\n}\n$log.$id = '$log';\n\n// services/count.js\nfunction $count(notify, $log) {\n  this.count = 0;\n  $log.info('create service#$count should be called only once');\n  this.increment = () => {\n    this.count += 1;\n    notify();\n  };\n  this.decrement = () => {\n    this.count -= 1;\n    notify();\n  };\n  return this;\n}\n$count.$id = 'count';\n$count.dependencies = ['$log'];\n\n\n// index.js\nregisterService('$log', $log);\nregisterService('$count', $count);\n\n// components/Counter\nfunction Counter(props) {\n  const $count = useService('$count');\n  console.log('Counter.render()', props.id);\n  \n  return (\n      <p id={props.id}>Count state value({props.id}): {$count.count}</p>\n  );\n}\n\n// components/CountController\nfunction CountController(props) {\n  const $count = useService('$count');\n  console.log('CountController.render()');\n  \n  return (\n    <div>\n      <button onClick={() => $count.increment()}>\n        +\n      </button>\n      <button onClick={() => $count.decrement()}>\n        -\n      </button>\n    </div>\n  );\n}\n\n// App.js\nfunction App() {\n  console.log('App.render');\n  const [show, setShow] = useState(true);\n  return (\n    <div className=\"App\">\n      React.version = \"{React.version}\"\n      <Counter id=\"first\" />\n      <CountController />\n      {show && (\n        <Counter id=\"second\" />\n      )}\n      <button onClick={() => setShow(!show)}>\n        Toggle second Counter instance\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}